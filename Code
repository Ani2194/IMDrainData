import pandas as pd 
import numpy as np 
import matplotlib.pyplot as plt 
import folium 
import geopandas as gpd 
from scipy.spatial import cKDTree
from shapely.geometry import Point
import geopandas as gsd 
import numpy as np
import pip 
#pip.main(['install', 'imdilib'])
import imdlib as imd
import geopandas as gpd 
import pandas as pd 

# download the rain data .grd format
start_yr = 1970 
end_yr = 2020
variable = 'rain' # other options are ('tmin'/ 'tmax')
data1 = imd.get_data(variable, start_yr, end_yr, fn_format='yearwise')
#ds = data.get_xarray()




Rain = 'D:\\Jalasmruti\\rain'
start_yr = 1970 # give starting year from which you want to download/convert data: 1901 ownwards for rainfall, 1951 for tmax and tmin
end_yr = 2020 # give ending year upto which you want to download/convert data
variable = 'rain' # give variable name (rain for rainfall at 0.25 deg, tmax or tmin for rainfall, min or max temperature at 1 deg resolution)
file_format = 'yearwise' # other option (None), which will assume deafult imd naming convention
file_dir = Rain # this path should be same as mentioned in previous line
data = imd.open_data(variable, start_yr, end_yr,'yearwise', file_dir) # this will open the data downloaded and saved in the location mentioned in previous line
if variable == 'rain':
    grid_size = 0.25 # grid spacing in deg
    y_count = 129 # no of grids in y direction
    x_count = 135 # no of grids in x direction
    x = 66.5 # starting longitude taken from control file (.ctl)
    y = 6.5 # starting latitude taken from control file (.ctl)
elif variable == 'tmax' or variable == 'tmin':
    grid_size = 1 # grid spacing in deg
    y_count = 31 # no of grids in y direction
    x_count = 31 # no of grids in x direction
    x = 67.5 # starting longitude taken from control file (.ctl)
    y = 7.5 # starting latitude taken from control file (.ctl)

#print(grid_size,x_count, y_count, x, y)
data
data.shape
np_array = data.data
#print(np_array[0,0,0])
#xr_objecct = data.get_xarray()
#type(xr_objecct)
#xr_objecct.mean('time').plot()
years_no = (end_yr - start_yr) + 1
#print(years_no)
day = 0
for yr in range(0,years_no):
    f = open(Rain1970+str(start_yr+yr)+"_"+str(variable)+".csv",'w') # just change the path where you want to save csv file
    if ((start_yr+yr) % 4 == 0) and ((start_yr+yr) % 100 != 0):  # check for leap year
        days = 366
        count = yr + days
    elif ((start_yr+yr) % 4 == 0) and ((start_yr+yr) % 100 == 0) and ((start_yr+yr) % 400 == 0):
        days = 366
        count = yr + days
    else:
        days = 365
        count = yr + days

    day = day + days

    f.write("X,Y,")
    for d in range(0, days):
        f.write(str(d+1))
        f.write(",")
    f.write("\n")
    #print(np_array[364,0,0])
    for j in range(0, y_count):

        for i in range(0, x_count):

            f.write(str((i * grid_size) + x))
            f.write(",")
            f.write(str((j * grid_size) + y))
            f.write(",")
            time = 0
            for k in range(day-days, day):

                val = np_array[k,i,j]
                if val == 99.9000015258789 or val == -999:
                    f.write(str(-9999))
                    f.write(",")
                else:
                    f.write(str(val))
                    f.write(",")


            f.write("\n")
    print("File for " + str(start_yr + yr) + "_" + str(variable) + " is saved")
print("CSV conversion successful !")

# The following file must be present, it is india district geopandas file. Which can be easily downloaded from github. 
# This is the link for it 'https://github.com/deldersveld/topojson/blob/master/countries/india/india-districts.json'. 
india = gpd.read_file('D:\Jalasmruti\india-districts.json') # provide own path here 
india['centerD'] = india['geometry'].apply(lambda x: x.centroid)
india.to_excel('D:\Jalasmruti\IndiaD.xlsx') # provide own path here 
india.drop(columns=['geometry'], inplace = True)

Londist =list(india['centerD'].geometry.x)
Latdist = list(india['centerD'].geometry.y)

def ckdnearest(gdA, gdB):

    nA = np.array(list(gdA.geometry.apply(lambda x: (x.x, x.y))))
    nB = np.array(list(gdB['centerD'].apply(lambda x: (x.x, x.y))))
    btree = cKDTree(nB)
    dist, idx = btree.query(nA, k=1)
    gdB_nearest = gdB.iloc[idx].drop(columns='centerD').reset_index(drop=True)
    gdf = pd.concat(
        [
            gdA.reset_index(drop=True),
            gdB_nearest,
            pd.Series(dist, name='dist')
        ], 
        axis=1)

    return gdf

for i in range(1980,2021): 
    rtemp = pd.read_csv(f'D:\\Jalasmruti\\raincsv\\rain{i}_rain.csv') # provide own path here 
    r = list(rtemp[rtemp.iloc[:,2] == -9999].index.values)
    rtemp.drop(r, inplace = True)
    rtemp.reset_index(inplace = True)
    rtemp.drop(columns=['index'], axis = 1,inplace = True)
    rtemp['Distric'] = np.nan
    rtemp = gpd.GeoDataFrame(rtemp, geometry=gpd.points_from_xy(rtemp.X, rtemp.Y), crs="EPSG:4326")
    nut = ckdnearest(rtemp, india)
    rtemp.insert(loc=2, column= 'District', value = nut['NAME_2'])
    rtemp.to_csv(f'D:\\Jalasmruti\\raincsv\\rain{i}_rain.csv') # provide own path here 
